@using VrseWebApplication.Code
@using VrseWebApplication.Controllers
@using VrseWebApplication.Models
@model VrseWebApplication.Models.DxTestPartial03ViewModel

<script>
	function idSelect_valueChanged(e) {
		const $dataGrid = $("#embedded-idselect-grid");

		if ($dataGrid.length) {
			const dataGrid = $dataGrid.dxDataGrid("instance");
			dataGrid.selectRows(e.value, false);
		}
	}

	function idSelect_displayExpr(item) {
		return item && `${item.@nameof(Data01Model.Name)}`;
	}
</script>

@using (Html.DevExtreme().ValidationGroup())
{
	@Html.ValidationSummary()

	<div class="form-panel">
		<div class="form-fields-area">
			<div class="row">
				<div class="col-12">
					@Html.LabelFor(m => m.Id, new { @class = @"form-label" })
				</div>
				<div class="col-12">
					<div class="d-flex">
						<div class="flex-grow-1">
							@* https://demos.devexpress.com/ASPNetCore/Demo/DropDownBox/SingleSelection/ *@
							@(Html.DevExtreme().DropDownBoxFor(m => m.Id)
								//.DeferRendering(false)
								.DropDownOptions(o => o.Container(@"sendModal")) // Notwendig wenn in Modal. https://supportcenter.devexpress.com/ticket/details/t678794
								.ID(@"idSelectControl")
								.DisplayExpr(new JS(@"idSelect_displayExpr"))
								.DataSource(d => d.Mvc()
									.Controller(nameof(DataController).Cn())
									.LoadAction(nameof(DataController.LoadAllData01))
									.LoadMode(DataSourceLoadMode.Raw)
									.Key(nameof(Data01Model.Id).ToLowerInvariant()))
								.Placeholder("Select data")
								.OnValueChanged(@"idSelect_valueChanged")
								.ContentTemplate(new TemplateName(@"EmbeddedIdSelect")))
							@Html.ValidationMessageFor(m => m.Id)
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@using (Html.DevExtreme().NamedTemplate(@"EmbeddedIdSelect"))
{
	@(Html.DevExtreme().DataGrid()
		.ID(@"embedded-idselect-grid")
		.DataSource(new JS(@"component.getDataSource()"))
		.Columns(columns =>
		{
			columns.Add().DataField(nameof(Data01Model.Id)).Caption("ID").Visible(false);
			columns.Add().DataField(nameof(Data01Model.Name)).Caption("Name");
		})
		.HoverStateEnabled(true)
		.Paging(p => p.PageSize(10))
		.SearchPanel(sp=>sp.Visible(true))
		.FilterRow(f => f.Visible(true))
		.Scrolling(s => s.Mode(GridScrollingMode.Virtual))
		.Height(345)
		.Selection(s => s.Mode(SelectionMode.Single))
		.SelectedRowKeys(new JS(@"component.option(""value"") ? [component.option(""value"")] : []"))
		.OnSelectionChanged(
			@<text>
				function(selectedItems) {
				var keys = selectedItems.selectedRowKeys;
				component.option("value", keys);
				component.close();
				}
			 </text>)
		)
}